}
VariantProt ("Val", "G", "A")
str_replace ("Val", "G", "A") -> protcodes
codex %>%
filter (acids == "Val") %>%
pull (codes) -> protcodes
str_replace (protcodes, "G", "A") -> protcodes
protcodes
VariantProt ("Ter", "A", "G")
VariantProt <- function (protref, nucref, nucvar) {
print (paste ("Your reference amino acid is:", protref))
codex %>%
filter (acids == "Val") %>%
pull (codes) -> protcodes
str_replace (protcodes, nucref, nucvar) -> protcodes
codex %>%
filter (codes %in% protcodes) %>%
pull (acids) %>%
unique () %>%
paste (collapse = ', ')-> possible_prots
print (paste ("Your possible variant amino acids are:", possible_prots))
}
VariantProt ("Ter", "A", "G")
VariantProt <- function (protref, nucref, nucvar) {
print (paste ("Your reference amino acid is:", protref))
codex %>%
filter (acids == protref) %>%
pull (codes) -> protcodes
str_replace (protcodes, nucref, nucvar) -> protcodes
codex %>%
filter (codes %in% protcodes) %>%
pull (acids) %>%
unique () %>%
paste (collapse = ', ')-> possible_prots
print (paste ("Your possible variant amino acids are:", possible_prots))
}
VariantProt ("Ter", "A", "G")
VariantProt ("Leu", "T", "A")
protcodes
str_count (protcodes, "T")
str_locate (protcodes, "T")
str_locate (protcodes, "A")
str_which (protcodes, "A")
str_which (str_count (protcodes, "A") >1)
sum (str_count (protcodes, "A") >1)
str_locate_all (protcodes, "T")
str_count (protcodes, "A")
str_count (protcodes, "A") -> counts
str_which (counts, 2)
str_count (protcodes, "A") %>%
which (. >= 2) -> counts
counts %>% match (counts >= 2)
counts
match (counts >= 2)
match (counts, counts >= 2)
str_count (protcodes, "A") %>% # in case multiple nucleotides the same in a code, need to duplicate those and account for a change at either position
{ which(. >= 2) }
str_count (protcodes, "A") %>% # in case multiple nucleotides the same in a code, need to duplicate those and account for a change at either position
{ which(. >= 2) } -> counts
counts
str_count (protcodes, "A") %>% # in case multiple nucleotides the same in a code, need to duplicate those and account for a change at either position
{ which(. >= 2) } -> index_multi_nucref
rep ([[index_multi_nucref]], each = index_multi_nucref)
protcodes[index_multi_nucref]
rep (protcodes[index_multi_nucref], each = index_multi_nucref)
rep (protcodes[index_multi_nucref], each = str_count (protcodes, "A"))
protcodes
index_multi_nucref <- c(1, 3)
rep (protcodes[index_multi_nucref], each = 2)
str_count (protcodes, nucref) -> counts # in case multiple nucleotides the same in a code, need to duplicate those and account for a change at either position
{ which(counts >= 2) } -> index_multi_nucref
str_count (protcodes, "A") -> counts # in case multiple nucleotides the same in a code, need to duplicate those and account for a change at either position
{ which(counts >= 2) } -> index_multi_nucref
rep (protcodes[index_multi_nucref], each = counts[index_multi_nucref])
index_multi_nucref <- c(1, 3)
rep (protcodes[index_multi_nucref], each = counts[index_multi_nucref])
rep (protcodes[index_multi_nucref], times = counts[index_multi_nucref])
counts <- c(3, 1, 2, 1)
{ which(counts >= 2) } -> index_multi_nucref
rep (protcodes[index_multi_nucref], times = counts[index_multi_nucref])
rep (protcodes[index_multi_nucref], times = counts[index_multi_nucref]) -> protcodes # replicates each amino acid code with multiple occurrences of the reference nucleotide by the number of times the reference nucleotide is in that code
# so 'ATA' with nucref of 'A' will replicate twice, by 'AAA' with replicate three times.
protcodes
protcodes [-index_multi_nucref] -> protcodes                                                 # so 'ATA' with nucref of 'A' will replicate twice, by 'AAA' with replicate three times.
protcodes
codex %>%
filter (acids == "Leu") %>%
pull (codes) -> protcodes
protcodes
str_count (protcodes, "T") -> counts # in case multiple nucleotides the same in a code, need to replicate those and account for a change at either position
{ which(counts >= 2) } -> index_multi_nucref # gets index of each amino acid code with more than 1 occurrence of the reference nucleotide
rep (protcodes[index_multi_nucref], times = counts[index_multi_nucref]) -> reps # replicates each amino acid code with multiple occurrences of the reference nucleotide by the number of times the reference nucleotide is in that code
protcodes [-index_multi_nucref] -> protcodes
protcodes
reps
protcodes <- c(protcodes, reps)
protcodes
prev <- protcodes[(0)]
for (i in 1:length(protcodes)) {
prev <- protcodes[1-i]
prevprev <- protcodes[2-i]
current <- protcodes[i]
if (prev != current) {
str_replace (protcodes, nucref, nucvar) -> protcodes # code to replace your reference nucleotide with the variant nucleotide (at first occurance)
} else if ((prev == current) & (prev != current)) { # if the current code has already been seen in the vector, replace second occurance of the reference nucleotide
str_replace (protcodes, nucref, nucvar, pos=2) -> protcodes
} else if ((prev == current) & (prev == current)) { # if the current code has already been seen in the vector twice, replace third occurance of the reference nucleotide
str_replace (protcodes, nucref, nucvar, pos=3) -> protcodes
}}
for (i in 1:length(protcodes)) {
prev <- protcodes[1-i]
prevprev <- protcodes[2-i]
if (i == 1) {
prev <- 0
prevprev <-
}
current <- protcodes[i]
if (prev != current) {
str_replace (protcodes, nucref, nucvar) -> protcodes # code to replace your reference nucleotide with the variant nucleotide (at first occurance)
} else if ((prev == current) & (prev != current)) { # if the current code has already been seen in the vector, replace second occurance of the reference nucleotide
str_replace (protcodes, nucref, nucvar, pos=2) -> protcodes
} else if ((prev == current) & (prev == current)) { # if the current code has already been seen in the vector twice, replace third occurance of the reference nucleotide
str_replace (protcodes, nucref, nucvar, pos=3) -> protcodes
}}
for (i in 1:length(protcodes)) {
prev <- protcodes[1-i]
prevprev <- protcodes[2-i]
if (i == 1) {
prev <- 0
prevprev <- 0
}
current <- protcodes[i]
if (prev != current) {
str_replace (protcodes, nucref, nucvar) -> protcodes # code to replace your reference nucleotide with the variant nucleotide (at first occurance)
} else if ((prev == current) & (prev != current)) { # if the current code has already been seen in the vector, replace second occurance of the reference nucleotide
str_replace (protcodes, nucref, nucvar, pos=2) -> protcodes
} else if ((prev == current) & (prev == current)) { # if the current code has already been seen in the vector twice, replace third occurance of the reference nucleotide
str_replace (protcodes, nucref, nucvar, pos=3) -> protcodes
}}
VariantProt <- function (protref, nucref, nucvar) {
print (paste ("Your reference amino acid is:", protref))
codex %>%
filter (acids == protref) %>%
pull (codes) -> protcodes
str_count (protcodes, nucref) -> counts # in case multiple nucleotides the same in a code, need to replicate those and account for a change at either position
{ which(counts >= 2) } -> index_multi_nucref # gets index of each amino acid code with more than 1 occurrence of the reference nucleotide
rep (protcodes[index_multi_nucref], times = counts[index_multi_nucref]) -> reps # replicates each amino acid code with multiple occurrences of the reference nucleotide by the number of times the reference nucleotide is in that code
protcodes [-index_multi_nucref] -> protcodes                                                 # so 'ATA' with nucref of 'A' will replicate twice, by 'AAA' with replicate three times.
protcodes <- c(protcodes, reps) # full list including repeated codes
for (i in 1:length(protcodes)) {
prev <- protcodes[1-i]
prevprev <- protcodes[2-i]
if (i == 1) {
prev <- 0
prevprev <- 0
}
current <- protcodes[i]
if (prev != current) {
str_replace (protcodes, nucref, nucvar) -> protcodes # code to replace your reference nucleotide with the variant nucleotide (at first occurance)
} else if ((prev == current) & (prev != current)) { # if the current code has already been seen in the vector, replace second occurance of the reference nucleotide
str_replace (protcodes, nucref, nucvar, pos=2) -> protcodes
} else if ((prev == current) & (prev == current)) { # if the current code has already been seen in the vector twice, replace third occurance of the reference nucleotide
str_replace (protcodes, nucref, nucvar, pos=3) -> protcodes
}}
}
VariantProt <- function (protref, nucref, nucvar) {
print (paste ("Your reference amino acid is:", protref))
codex %>%
filter (acids == protref) %>%
pull (codes) -> protcodes
str_count (protcodes, nucref) -> counts # in case multiple nucleotides the same in a code, need to replicate those and account for a change at either position
{ which(counts >= 2) } -> index_multi_nucref # gets index of each amino acid code with more than 1 occurrence of the reference nucleotide
rep (protcodes[index_multi_nucref], times = counts[index_multi_nucref]) -> reps # replicates each amino acid code with multiple occurrences of the reference nucleotide by the number of times the reference nucleotide is in that code
protcodes [-index_multi_nucref] -> protcodes                                                 # so 'ATA' with nucref of 'A' will replicate twice, by 'AAA' with replicate three times.
protcodes <- c(protcodes, reps) # full list including repeated codes
for (i in 1:length(protcodes)) {
prev <- protcodes[1-i]
prevprev <- protcodes[2-i]
if (i == 1) {
prev <- 0
prevprev <- 0
}
current <- protcodes[i]
if (prev != current) {
str_replace (protcodes, nucref, nucvar) -> protcodes # code to replace your reference nucleotide with the variant nucleotide (at first occurance)
} else if ((prev == current) & (prev != current)) { # if the current code has already been seen in the vector, replace second occurance of the reference nucleotide
str_replace (protcodes, nucref, nucvar, pos=2) -> protcodes
} else if ((prev == current) & (prev == current)) { # if the current code has already been seen in the vector twice, replace third occurance of the reference nucleotide
str_replace (protcodes, nucref, nucvar, pos=3) -> protcodes
}}
codex %>%
filter (codes %in% protcodes) %>%
pull (acids) %>%
unique () %>%
paste (collapse = ', ')-> possible_prots
print (paste ("Your possible variant amino acids are:", possible_prots))
}
VariantProt ("Leu", "T", "A")
VariantProt <- function (protref, nucref, nucvar) {
print (paste ("Your reference amino acid is:", protref))
codex %>%
filter (acids == protref) %>%
pull (codes) -> protcodes
str_count (protcodes, nucref) -> counts # in case multiple nucleotides the same in a code, need to replicate those and account for a change at either position
{ which(counts >= 2) } -> index_multi_nucref # gets index of each amino acid code with more than 1 occurrence of the reference nucleotide
rep (protcodes[index_multi_nucref], times = counts[index_multi_nucref]) -> reps # replicates each amino acid code with multiple occurrences of the reference nucleotide by the number of times the reference nucleotide is in that code
protcodes [-index_multi_nucref] -> protcodes                                                 # so 'ATA' with nucref of 'A' will replicate twice, by 'AAA' with replicate three times.
protcodes <- c(protcodes, reps) # full list including repeated codes
for (i in 1:length(protcodes)) {
prev <- protcodes[1-i]
prevprev <- protcodes[2-i]
if (i == 1) {
prev <- "XXX"
prevprev <- "XXX"
}
if (i == 2) {
prevprev <- "XXX"
}
current <- protcodes[i]
if (prev != current) {
str_replace (protcodes, nucref, nucvar) -> protcodes # code to replace your reference nucleotide with the variant nucleotide (at first occurance)
} else if ((prev == current) & (prev != current)) { # if the current code has already been seen in the vector, replace second occurance of the reference nucleotide
str_replace (protcodes, nucref, nucvar, pos=2) -> protcodes
} else if ((prev == current) & (prev == current)) { # if the current code has already been seen in the vector twice, replace third occurance of the reference nucleotide
str_replace (protcodes, nucref, nucvar, pos=3) -> protcodes
}}
codex %>%
filter (codes %in% protcodes) %>%
pull (acids) %>%
unique () %>%
paste (collapse = ', ')-> possible_prots
print (paste ("Your possible variant amino acids are:", possible_prots))
}
VariantProt ("Leu", "T", "A")
VariantProt <- function (protref, nucref, nucvar) {
print (paste ("Your reference amino acid is:", protref))
codex %>%
filter (acids == protref) %>%
pull (codes) -> protcodes
str_count (protcodes, nucref) -> counts # in case multiple nucleotides the same in a code, need to replicate those and account for a change at either position
{ which(counts >= 2) } -> index_multi_nucref # gets index of each amino acid code with more than 1 occurrence of the reference nucleotide
rep (protcodes[index_multi_nucref], times = counts[index_multi_nucref]) -> reps # replicates each amino acid code with multiple occurrences of the reference nucleotide by the number of times the reference nucleotide is in that code
protcodes [-index_multi_nucref] -> protcodes                                                 # so 'ATA' with nucref of 'A' will replicate twice, by 'AAA' with replicate three times.
protcodes <- c(protcodes, reps) # full list including repeated codes
for (i in 1:length(protcodes)) {
prev <- protcodes[1-i]
prevprev <- protcodes[2-i]
if (i == 1) {
prev <- "XXX"
prevprev <- "XXX"
}
if (i == 2) {
prevprev <- "XXX"
}
current <- protcodes[i]
if (prev != current) {
str_replace (protcodes, nucref, nucvar) -> protcodes # code to replace your reference nucleotide with the variant nucleotide (at first occurance)
} else if ((prev == current) & (prevprev != current)) { # if the current code has already been seen in the vector, replace second occurance of the reference nucleotide
str_replace (protcodes, nucref, nucvar, pos=2) -> protcodes
} else if ((prev == current) & (prevprev == current)) { # if the current code has already been seen in the vector twice, replace third occurance of the reference nucleotide
str_replace (protcodes, nucref, nucvar, pos=3) -> protcodes
}}
codex %>%
filter (codes %in% protcodes) %>%
pull (acids) %>%
unique () %>%
paste (collapse = ', ')-> possible_prots
print (paste ("Your possible variant amino acids are:", possible_prots))
}
VariantProt ("Leu", "T", "A")
prev != current
if (i == 1) {
prev <- "XXX"
prevprev <- "XXX"
}
if (i == 2) {
prevprev <- "XXX"
}
current <- protcodes[i]
if (prev != current) {
str_replace (protcodes, nucref, nucvar) -> protcodes # code to replace your reference nucleotide with the variant nucleotide (at first occurance)
} else if ((prev == current) & (prevprev != current)) { # if the current code has already been seen in the vector, replace second occurance of the reference nucleotide
str_replace (protcodes, nucref, nucvar, pos=2) -> protcodes
} else if ((prev == current) & (prevprev == current)) { # if the current code has already been seen in the vector twice, replace third occurance of the reference nucleotide
str_replace (protcodes, nucref, nucvar, pos=3) -> protcodes
}
VariantProt <- function (protref, nucref, nucvar) {
print (paste ("Your reference amino acid is:", protref))
codex %>%
filter (acids == protref) %>%
pull (codes) -> protcodes
str_count (protcodes, nucref) -> counts # in case multiple nucleotides the same in a code, need to replicate those and account for a change at either position
{ which(counts >= 2) } -> index_multi_nucref # gets index of each amino acid code with more than 1 occurrence of the reference nucleotide
rep (protcodes[index_multi_nucref], times = counts[index_multi_nucref]) -> reps # replicates each amino acid code with multiple occurrences of the reference nucleotide by the number of times the reference nucleotide is in that code
protcodes [-index_multi_nucref] -> protcodes                                                 # so 'ATA' with nucref of 'A' will replicate twice, by 'AAA' with replicate three times.
protcodes <- c(protcodes, reps) # full list including repeated codes
for (i in 1:length(protcodes)) {
prev <- protcodes[1-i]
prevprev <- protcodes[2-i]
if (i == 1) {
prev <- "XXX"
prevprev <- "XXX"
}
if (i == 2) {
prevprev <- "XXX"
}
current <- protcodes[i]
if (prev != current) {
str_replace (protcodes, nucref, nucvar) -> protcodes # code to replace your reference nucleotide with the variant nucleotide (at first occurance)
} else if ((prev == current) & (prevprev != current)) { # if the current code has already been seen in the vector, replace second occurance of the reference nucleotide
str_replace (protcodes, nucref, nucvar, pos=2) -> protcodes
} else if ((prev == current) & (prevprev == current)) { # if the current code has already been seen in the vector twice, replace third occurance of the reference nucleotide
str_replace (protcodes, nucref, nucvar, pos=3) -> protcodes
}}
codex %>%
filter (codes %in% protcodes) %>%
pull (acids) %>%
unique () %>%
paste (collapse = ', ')-> possible_prots
print (paste ("Your possible variant amino acids are:", possible_prots))
}
VariantProt ("Leu", "T", "A")
VariantProt <- function (protref, nucref, nucvar) {
print (paste ("Your reference amino acid is:", protref))
codex %>%
filter (acids == protref) %>%
pull (codes) -> protcodes
str_count (protcodes, nucref) -> counts # in case multiple nucleotides the same in a code, need to replicate those and account for a change at either position
{ which(counts >= 2) } -> index_multi_nucref # gets index of each amino acid code with more than 1 occurrence of the reference nucleotide
rep (protcodes[index_multi_nucref], times = counts[index_multi_nucref]) -> reps # replicates each amino acid code with multiple occurrences of the reference nucleotide by the number of times the reference nucleotide is in that code
protcodes [-index_multi_nucref] -> protcodes                                                 # so 'ATA' with nucref of 'A' will replicate twice, by 'AAA' with replicate three times.
protcodes <- c(protcodes, reps) # full list including repeated codes
for (i in 1:length(protcodes)) {
prev <- protcodes[1-i]
prevprev <- protcodes[2-i]
if (i == 1) {
prev <- "XXX"
prevprev <- "XXX"
}
if (i == 2) {
prevprev <- "XXX"
}
current <- protcodes[i]
if (prev != protcodes[i]) {
str_replace (protcodes, nucref, nucvar) -> protcodes # code to replace your reference nucleotide with the variant nucleotide (at first occurance)
} else if ((prev == current) & (prevprev != current)) { # if the current code has already been seen in the vector, replace second occurance of the reference nucleotide
str_replace (protcodes, nucref, nucvar, pos=2) -> protcodes
} else if ((prev == current) & (prevprev == current)) { # if the current code has already been seen in the vector twice, replace third occurance of the reference nucleotide
str_replace (protcodes, nucref, nucvar, pos=3) -> protcodes
}}
codex %>%
filter (codes %in% protcodes) %>%
pull (acids) %>%
unique () %>%
paste (collapse = ', ')-> possible_prots
print (paste ("Your possible variant amino acids are:", possible_prots))
}
VariantProt ("Leu", "T", "A")
str_match(prev, current)
prev <- "CTC"
str_match(prev, current)
VariantProt <- function (protref, nucref, nucvar) {
print (paste ("Your reference amino acid is:", protref))
codex %>%
filter (acids == protref) %>%
pull (codes) -> protcodes
str_count (protcodes, nucref) -> counts # in case multiple nucleotides the same in a code, need to replicate those and account for a change at either position
{ which(counts >= 2) } -> index_multi_nucref # gets index of each amino acid code with more than 1 occurrence of the reference nucleotide
rep (protcodes[index_multi_nucref], times = counts[index_multi_nucref]) -> reps # replicates each amino acid code with multiple occurrences of the reference nucleotide by the number of times the reference nucleotide is in that code
protcodes [-index_multi_nucref] -> protcodes                                                 # so 'ATA' with nucref of 'A' will replicate twice, by 'AAA' with replicate three times.
protcodes <- c(protcodes, reps) # full list including repeated codes
for (i in 1:length(protcodes)) {
prev <- protcodes[1-i]
prevprev <- protcodes[2-i]
if (i == 1) {
prev <- "XXX"
prevprev <- "XXX"
}
if (i == 2) {
prevprev <- "XXX"
}
current <- protcodes[i]
if (is.na (str_match (prev, current))) {
str_replace (protcodes, nucref, nucvar) -> protcodes # code to replace your reference nucleotide with the variant nucleotide (at first occurance)
} else if ((!is.na (str_match (prev, current))) & (is.na (str_match (prevprev, current)))) { # if the current code has already been seen in the vector, replace second occurance of the reference nucleotide
str_replace (protcodes, nucref, nucvar, pos=2) -> protcodes
} else if ((!is.na (str_match (prev, current))) & (!is.na (str_match (prevprev, current)))) { # if the current code has already been seen in the vector twice, replace third occurance of the reference nucleotide
str_replace (protcodes, nucref, nucvar, pos=3) -> protcodes
}}
codex %>%
filter (codes %in% protcodes) %>%
pull (acids) %>%
unique () %>%
paste (collapse = ', ')-> possible_prots
print (paste ("Your possible variant amino acids are:", possible_prots))
}
VariantProt ("Leu", "T", "A")
VariantProt <- function (protref, nucref, nucvar) {
print (paste ("Your reference amino acid is:", protref))
codex %>%
filter (acids == protref) %>%
pull (codes) -> protcodes
str_count (protcodes, nucref) -> counts # in case multiple nucleotides the same in a code, need to replicate those and account for a change at either position
{ which(counts >= 2) } -> index_multi_nucref # gets index of each amino acid code with more than 1 occurrence of the reference nucleotide
rep (protcodes[index_multi_nucref], times = counts[index_multi_nucref]) -> reps # replicates each amino acid code with multiple occurrences of the reference nucleotide by the number of times the reference nucleotide is in that code
protcodes [-index_multi_nucref] -> protcodes                                                 # so 'ATA' with nucref of 'A' will replicate twice, by 'AAA' with replicate three times.
protcodes <- c(protcodes, reps) # full list including repeated codes
for (i in 1:length(protcodes)) {
prev <- protcodes[1-i]
prevprev <- protcodes[2-i]
if (i == 1) {
prev <- "XXX"
prevprev <- "XXX"
}
if (i == 2) {
prevprev <- "XXX"
}
current <- protcodes[i]
if (is.na (str_match (prev, current)) == TRUE) {
str_replace (protcodes, nucref, nucvar) -> protcodes # code to replace your reference nucleotide with the variant nucleotide (at first occurance)
} else if ((!is.na (str_match (prev, current))) & (is.na (str_match (prevprev, current)))) { # if the current code has already been seen in the vector, replace second occurance of the reference nucleotide
str_replace (protcodes, nucref, nucvar, pos=2) -> protcodes
} else if ((!is.na (str_match (prev, current))) & (!is.na (str_match (prevprev, current)))) { # if the current code has already been seen in the vector twice, replace third occurance of the reference nucleotide
str_replace (protcodes, nucref, nucvar, pos=3) -> protcodes
}}
codex %>%
filter (codes %in% protcodes) %>%
pull (acids) %>%
unique () %>%
paste (collapse = ', ')-> possible_prots
print (paste ("Your possible variant amino acids are:", possible_prots))
}
VariantProt ("Leu", "T", "A")
str_match(prev, current))
str_match(prev, current)
str_pos_replace <- function(string, pattern, replacement, pos=1){
str_locate_all(string, pattern)[[1]][pos,, drop=FALSE] %>%
`str_sub<-`(string, ., value = replacement)
}
library (tidyverse)
library (stringr)
acids <- c("Phe", "Phe", "Leu", "Leu", "Leu", "Leu", "Leu", "Leu", "Ile", "Ile", "Ile", "Met", "Val", "Val", "Val", "Val", "Ser", "Ser", "Ser", "Ser", "Pro", "Pro", "Pro", "Pro", "Thr", "Thr", "Thr", "Thr", "Ala", "Ala", "Ala", "Ala", "Tyr", "Tyr", "Ter", "Ter", "His", "His", "Gln", "Gln", "Asn", "Asn", "Lys", "Lys", "Asp", "Asp", "Glu", "Glu", "Cys", "Cys", "Ter", "Trp", "Arg", "Arg", "Arg", "Arg", "Ser", "Ser", "Arg", "Arg", "Gly", "Gly", "Gly", "Gly")
codes <- c("TTT", "TTC", "TTA", "TTG", "CTT", "CTC", "CTA", "CTG", "ATT", "ATC", "ATA", "ATG", "GTT", "GTC", "GTA", "GTG", "TCT", "TCC", "TCA", "TCG", "CCT", "CCC", "CCA", "CCG", "ACT", "ACC", "ACA", "ACG", "GCT", "GCC", "GCA", "GCG", "TAT", "TAC", "TAA", "TAG", "CAT", "CAC", "CAA", "CAG", "AAT", "AAC", "AAA", "AAG", "GAT", "GAC", "GAA", "GAG", "TGT", "TGC", "TGA", "TGG", "CGT", "CGC", "CGA", "CGG", "AGT", "AGC", "AGA", "AGG", "GGT", "GGC", "GGA", "GGG")
codex <- as_tibble (data.frame (acids, codes)) # used as a tbl to enable easier (dplyr) manipulation of the codex if needed
VariantProt <- function (protref, nucref, nucvar) {
print (paste ("Your reference amino acid is:", protref))
codex %>%
filter (acids == protref) %>%
pull (codes) -> protcodes
str_count (protcodes, nucref) -> counts # in case multiple nucleotides the same in a code, need to replicate those and account for a change at either position
{ which(counts >= 2) } -> index_multi_nucref # gets index of each amino acid code with more than 1 occurrence of the reference nucleotide
rep (protcodes[index_multi_nucref], times = counts[index_multi_nucref]) -> reps # replicates each amino acid code with multiple occurrences of the reference nucleotide by the number of times the reference nucleotide is in that code
protcodes [-index_multi_nucref] -> protcodes                                                 # so 'ATA' with nucref of 'A' will replicate twice, by 'AAA' with replicate three times.
protcodes <- c(protcodes, reps) # full list including repeated codes
str_pos_replace <- function(string, pattern, replacement, pos=1){
str_locate_all(string, pattern)[[1]][pos,, drop=FALSE] %>%
`str_sub<-`(string, ., value = replacement)
}
if #more than 1 of the codon in the vector
# then: str_pos_replace at first occurance in index 1 of the replacement in the vector
# then: str_pos_replace at second occurance in index 2 of the replacement in the vector
# then: str_pos_replace at third occurance in index 3 of the replacement in the vector
codex %>%
filter (codes %in% protcodes) %>%
pull (acids) %>%
unique () %>%
paste (collapse = ', ')-> possible_prots
print (paste ("Your possible variant amino acids are:", possible_prots))
}
install.packages (tidyverse)
library (tidyverse)
library (stringr)
acids <- c("Phe", "Phe", "Leu", "Leu", "Leu", "Leu", "Leu", "Leu", "Ile", "Ile", "Ile", "Met", "Val", "Val", "Val", "Val", "Ser", "Ser", "Ser", "Ser", "Pro", "Pro", "Pro", "Pro", "Thr", "Thr", "Thr", "Thr", "Ala", "Ala", "Ala", "Ala", "Tyr", "Tyr", "Ter", "Ter", "His", "His", "Gln", "Gln", "Asn", "Asn", "Lys", "Lys", "Asp", "Asp", "Glu", "Glu", "Cys", "Cys", "Ter", "Trp", "Arg", "Arg", "Arg", "Arg", "Ser", "Ser", "Arg", "Arg", "Gly", "Gly", "Gly", "Gly")
codes <- c("TTT", "TTC", "TTA", "TTG", "CTT", "CTC", "CTA", "CTG", "ATT", "ATC", "ATA", "ATG", "GTT", "GTC", "GTA", "GTG", "TCT", "TCC", "TCA", "TCG", "CCT", "CCC", "CCA", "CCG", "ACT", "ACC", "ACA", "ACG", "GCT", "GCC", "GCA", "GCG", "TAT", "TAC", "TAA", "TAG", "CAT", "CAC", "CAA", "CAG", "AAT", "AAC", "AAA", "AAG", "GAT", "GAC", "GAA", "GAG", "TGT", "TGC", "TGA", "TGG", "CGT", "CGC", "CGA", "CGG", "AGT", "AGC", "AGA", "AGG", "GGT", "GGC", "GGA", "GGG")
codex <- as_tibble (data.frame (acids, codes)) # used as a tbl to enable easier (dplyr) manipulation of the codex if needed
VariantProt <- function (protref, nucref, nucvar) {
print (paste ("Your reference amino acid is:", protref))
codex %>%
filter (acids == protref) %>%
pull (codes) -> protcodes
str_count (protcodes, nucref) -> counts # in case multiple nucleotides the same in a code, need to replicate those and account for a change at either position
{ which(counts >= 2) } -> index_multi_nucref # gets index of each amino acid code with more than 1 occurrence of the reference nucleotide
rep (protcodes[index_multi_nucref], times = counts[index_multi_nucref]) -> reps # replicates each amino acid code with multiple occurrences of the reference nucleotide by the number of times the reference nucleotide is in that code
protcodes [-index_multi_nucref] -> protcodes                                                 # so 'ATA' with nucref of 'A' will replicate twice, by 'AAA' with replicate three times.
protcodes <- c(protcodes, reps) # full list including repeated codes
str_pos_replace <- function(string, pattern, replacement, pos=1){
str_locate_all(string, pattern)[[1]][pos,, drop=FALSE] %>%
`str_sub<-`(string, ., value = replacement)
}
if #more than 1 of the codon in the vector
# then: str_pos_replace at first occurance in index 1 of the replacement in the vector
# then: str_pos_replace at second occurance in index 2 of the replacement in the vector
# then: str_pos_replace at third occurance in index 3 of the replacement in the vector
codex %>%
filter (codes %in% protcodes) %>%
pull (acids) %>%
unique () %>%
paste (collapse = ', ')-> possible_prots
print (paste ("Your possible variant amino acids are:", possible_prots))
}
install.packages ("tidyverse")
library (tidyverse)
library (stringr)
install.packages("AMR")
install.packages("AMR")
install.packages("AMR")
install.packages("https://CRAN.R-project.org/package=AMR")
("AMR")
install.packages("AMR")
install.packages("AMR")
install.packages("AMR")
source("~/MSc_Project/MSc_Project/gram_stain_updater.R")
