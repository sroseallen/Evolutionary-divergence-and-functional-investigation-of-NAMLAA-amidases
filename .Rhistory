str_replace (protcodes, nucref, nucvar, pos=3) -> protcodes
}}
codex %>%
filter (codes %in% protcodes) %>%
pull (acids) %>%
unique () %>%
paste (collapse = ', ')-> possible_prots
print (paste ("Your possible variant amino acids are:", possible_prots))
}
VariantProt ("Leu", "T", "A")
VariantProt <- function (protref, nucref, nucvar) {
print (paste ("Your reference amino acid is:", protref))
codex %>%
filter (acids == protref) %>%
pull (codes) -> protcodes
str_count (protcodes, nucref) -> counts # in case multiple nucleotides the same in a code, need to replicate those and account for a change at either position
{ which(counts >= 2) } -> index_multi_nucref # gets index of each amino acid code with more than 1 occurrence of the reference nucleotide
rep (protcodes[index_multi_nucref], times = counts[index_multi_nucref]) -> reps # replicates each amino acid code with multiple occurrences of the reference nucleotide by the number of times the reference nucleotide is in that code
protcodes [-index_multi_nucref] -> protcodes                                                 # so 'ATA' with nucref of 'A' will replicate twice, by 'AAA' with replicate three times.
protcodes <- c(protcodes, reps) # full list including repeated codes
for (i in 1:length(protcodes)) {
prev <- protcodes[1-i]
prevprev <- protcodes[2-i]
if (i == 1) {
prev <- "XXX"
prevprev <- "XXX"
}
if (i == 2) {
prevprev <- "XXX"
}
current <- protcodes[i]
if (is.na (str_match (prev, current)) == TRUE) {
str_replace (protcodes, nucref, nucvar) -> protcodes # code to replace your reference nucleotide with the variant nucleotide (at first occurance)
} else if ((!is.na (str_match (prev, current))) & (is.na (str_match (prevprev, current)))) { # if the current code has already been seen in the vector, replace second occurance of the reference nucleotide
str_replace (protcodes, nucref, nucvar, pos=2) -> protcodes
} else if ((!is.na (str_match (prev, current))) & (!is.na (str_match (prevprev, current)))) { # if the current code has already been seen in the vector twice, replace third occurance of the reference nucleotide
str_replace (protcodes, nucref, nucvar, pos=3) -> protcodes
}}
codex %>%
filter (codes %in% protcodes) %>%
pull (acids) %>%
unique () %>%
paste (collapse = ', ')-> possible_prots
print (paste ("Your possible variant amino acids are:", possible_prots))
}
VariantProt ("Leu", "T", "A")
str_match(prev, current))
str_match(prev, current)
str_pos_replace <- function(string, pattern, replacement, pos=1){
str_locate_all(string, pattern)[[1]][pos,, drop=FALSE] %>%
`str_sub<-`(string, ., value = replacement)
}
library (tidyverse)
library (stringr)
acids <- c("Phe", "Phe", "Leu", "Leu", "Leu", "Leu", "Leu", "Leu", "Ile", "Ile", "Ile", "Met", "Val", "Val", "Val", "Val", "Ser", "Ser", "Ser", "Ser", "Pro", "Pro", "Pro", "Pro", "Thr", "Thr", "Thr", "Thr", "Ala", "Ala", "Ala", "Ala", "Tyr", "Tyr", "Ter", "Ter", "His", "His", "Gln", "Gln", "Asn", "Asn", "Lys", "Lys", "Asp", "Asp", "Glu", "Glu", "Cys", "Cys", "Ter", "Trp", "Arg", "Arg", "Arg", "Arg", "Ser", "Ser", "Arg", "Arg", "Gly", "Gly", "Gly", "Gly")
codes <- c("TTT", "TTC", "TTA", "TTG", "CTT", "CTC", "CTA", "CTG", "ATT", "ATC", "ATA", "ATG", "GTT", "GTC", "GTA", "GTG", "TCT", "TCC", "TCA", "TCG", "CCT", "CCC", "CCA", "CCG", "ACT", "ACC", "ACA", "ACG", "GCT", "GCC", "GCA", "GCG", "TAT", "TAC", "TAA", "TAG", "CAT", "CAC", "CAA", "CAG", "AAT", "AAC", "AAA", "AAG", "GAT", "GAC", "GAA", "GAG", "TGT", "TGC", "TGA", "TGG", "CGT", "CGC", "CGA", "CGG", "AGT", "AGC", "AGA", "AGG", "GGT", "GGC", "GGA", "GGG")
codex <- as_tibble (data.frame (acids, codes)) # used as a tbl to enable easier (dplyr) manipulation of the codex if needed
VariantProt <- function (protref, nucref, nucvar) {
print (paste ("Your reference amino acid is:", protref))
codex %>%
filter (acids == protref) %>%
pull (codes) -> protcodes
str_count (protcodes, nucref) -> counts # in case multiple nucleotides the same in a code, need to replicate those and account for a change at either position
{ which(counts >= 2) } -> index_multi_nucref # gets index of each amino acid code with more than 1 occurrence of the reference nucleotide
rep (protcodes[index_multi_nucref], times = counts[index_multi_nucref]) -> reps # replicates each amino acid code with multiple occurrences of the reference nucleotide by the number of times the reference nucleotide is in that code
protcodes [-index_multi_nucref] -> protcodes                                                 # so 'ATA' with nucref of 'A' will replicate twice, by 'AAA' with replicate three times.
protcodes <- c(protcodes, reps) # full list including repeated codes
str_pos_replace <- function(string, pattern, replacement, pos=1){
str_locate_all(string, pattern)[[1]][pos,, drop=FALSE] %>%
`str_sub<-`(string, ., value = replacement)
}
if #more than 1 of the codon in the vector
# then: str_pos_replace at first occurance in index 1 of the replacement in the vector
# then: str_pos_replace at second occurance in index 2 of the replacement in the vector
# then: str_pos_replace at third occurance in index 3 of the replacement in the vector
codex %>%
filter (codes %in% protcodes) %>%
pull (acids) %>%
unique () %>%
paste (collapse = ', ')-> possible_prots
print (paste ("Your possible variant amino acids are:", possible_prots))
}
install.packages (tidyverse)
library (tidyverse)
library (stringr)
acids <- c("Phe", "Phe", "Leu", "Leu", "Leu", "Leu", "Leu", "Leu", "Ile", "Ile", "Ile", "Met", "Val", "Val", "Val", "Val", "Ser", "Ser", "Ser", "Ser", "Pro", "Pro", "Pro", "Pro", "Thr", "Thr", "Thr", "Thr", "Ala", "Ala", "Ala", "Ala", "Tyr", "Tyr", "Ter", "Ter", "His", "His", "Gln", "Gln", "Asn", "Asn", "Lys", "Lys", "Asp", "Asp", "Glu", "Glu", "Cys", "Cys", "Ter", "Trp", "Arg", "Arg", "Arg", "Arg", "Ser", "Ser", "Arg", "Arg", "Gly", "Gly", "Gly", "Gly")
codes <- c("TTT", "TTC", "TTA", "TTG", "CTT", "CTC", "CTA", "CTG", "ATT", "ATC", "ATA", "ATG", "GTT", "GTC", "GTA", "GTG", "TCT", "TCC", "TCA", "TCG", "CCT", "CCC", "CCA", "CCG", "ACT", "ACC", "ACA", "ACG", "GCT", "GCC", "GCA", "GCG", "TAT", "TAC", "TAA", "TAG", "CAT", "CAC", "CAA", "CAG", "AAT", "AAC", "AAA", "AAG", "GAT", "GAC", "GAA", "GAG", "TGT", "TGC", "TGA", "TGG", "CGT", "CGC", "CGA", "CGG", "AGT", "AGC", "AGA", "AGG", "GGT", "GGC", "GGA", "GGG")
codex <- as_tibble (data.frame (acids, codes)) # used as a tbl to enable easier (dplyr) manipulation of the codex if needed
VariantProt <- function (protref, nucref, nucvar) {
print (paste ("Your reference amino acid is:", protref))
codex %>%
filter (acids == protref) %>%
pull (codes) -> protcodes
str_count (protcodes, nucref) -> counts # in case multiple nucleotides the same in a code, need to replicate those and account for a change at either position
{ which(counts >= 2) } -> index_multi_nucref # gets index of each amino acid code with more than 1 occurrence of the reference nucleotide
rep (protcodes[index_multi_nucref], times = counts[index_multi_nucref]) -> reps # replicates each amino acid code with multiple occurrences of the reference nucleotide by the number of times the reference nucleotide is in that code
protcodes [-index_multi_nucref] -> protcodes                                                 # so 'ATA' with nucref of 'A' will replicate twice, by 'AAA' with replicate three times.
protcodes <- c(protcodes, reps) # full list including repeated codes
str_pos_replace <- function(string, pattern, replacement, pos=1){
str_locate_all(string, pattern)[[1]][pos,, drop=FALSE] %>%
`str_sub<-`(string, ., value = replacement)
}
if #more than 1 of the codon in the vector
# then: str_pos_replace at first occurance in index 1 of the replacement in the vector
# then: str_pos_replace at second occurance in index 2 of the replacement in the vector
# then: str_pos_replace at third occurance in index 3 of the replacement in the vector
codex %>%
filter (codes %in% protcodes) %>%
pull (acids) %>%
unique () %>%
paste (collapse = ', ')-> possible_prots
print (paste ("Your possible variant amino acids are:", possible_prots))
}
install.packages ("tidyverse")
library (tidyverse)
library (stringr)
install.packages("AMR")
install.packages("AMR")
install.packages("AMR")
install.packages("https://CRAN.R-project.org/package=AMR")
("AMR")
install.packages("AMR")
install.packages("AMR")
install.packages("AMR")
install.packages("AMR")
mo_gramstain("Klebsiella pneumoniae")
library(AMR)
mo_gramstain("Klebsiella pneumoniae")
mo_gramstain("Abditibacterium/1-166 utsteinense")
mo_gramstain("Abditibacterium utsteinense")
install.packages("tidyverse")
setwd("MSc_Project/MSc_Project/")
# read in file with bacterial names
read_csv("0_percent.csv")
library(tidyverse)
# read in file with bacterial names
read_csv("0_percent.csv")
# read in file with bacterial names
zero <- read_csv("0_percent.csv")
View(zero)
zero %>% select (-1) -> zero
# clean up genus/species column for running in AMR package
zero %>%
select (-1) %>%
str_replace (genus_species, ",", "") -> zero
# clean up genus/species column for running in AMR package
zero %>%
select (-1) %>%
str_replace (genus_species, ",", "X") -> zero
# clean up genus/species column for running in AMR package
zero %>%
select (-1) %>%
str_replace (zero$genus_species, ",", "") -> zero
# clean up genus/species column for running in AMR package
zero %>%
select (-1) %>%
mutate (genus_species = str_replace(genus_species, ",", "")) -> zero
# clean up genus/species column for running in AMR package
zero %>%
select (-1) %>%
mutate (genus_species = str_replace(genus_species, ",", "")) %>%
mutate (genus_species = str_replace(genus_species, "\\\[[:graph:]]", "")) -> zero
# clean up genus/species column for running in AMR package
zero %>%
select (-1) %>%
mutate (genus_species = str_replace(genus_species, ",", "")) %>%
mutate (genus_species = str_replace(genus_species, "\[[:graph:]]", "")) -> zero
# clean up genus/species column for running in AMR package
zero %>%
select (-1) %>%
mutate (genus_species = str_replace(genus_species, ",", "")) %>%
mutate (genus_species = str_replace(genus_species, "[[:graph:]]", "")) -> zero
zero <- read_csv("0_percent.csv")
# clean up genus/species column for running in AMR package
zero %>%
select (-1) %>%
mutate (genus_species = str_replace(genus_species, ",", "")) %>%
mutate (genus_species = str_replace(genus_species, "\\/[[:graph:]]", "")) -> zero
# read in file with bacterial names
zero <- read_csv("0_percent.csv")
# clean up genus/species column for running in AMR package
zero %>%
select (-1) %>%
mutate (genus_species = str_replace(genus_species, ",", "")) %>%
mutate (genus_species = str_replace(genus_species, "\\/[[:graph:]][[:graph:]][[:graph:]][[:graph:]][[:graph:]]", "")) -> zero
mo_gramstain("
Roseovarius pacificus")
zero %>% top_n(10)
zero %>% top_n(1)
zero %>% top_n()
zero %>% top_n(0)
zero %>% top_n(1)
zero %>% top_n(100)
zero %>% slice_head(n=10)
zero %>% slice_head(n=10) -> zero
for (i in 1:length(zero$"taxid")) {
gram <- mo_gramstain(zero[i, "genus_species"])
zero[i, "gram_status"] <- gram
}
zero <- read_csv("0_percent.csv")
# clean up genus/species column for running in AMR package
zero %>%
select (-1) %>%
mutate (genus_species = str_replace(genus_species, ",", "")) %>%
mutate (genus_species = str_replace(genus_species, "\\/[[:graph:]][[:graph:]][[:graph:]][[:graph:]][[:graph:]]", "")) %>%
mutate (gram_status = NA_character_) -> zero
zero %>% slice_tail(n=10) -> zero
for (i in 1:length(zero$"taxid")) {
gram <- mo_gramstain(zero[i, "genus_species"])
zero[i, "gram_status"] <- gram
}
options(AMR_keep_synonyms = TRUE)
for (i in 1:length(zero$"taxid")) {
gram <- mo_gramstain(zero[i, "genus_species"])
zero[i, "gram_status"] <- gram
}
options(AMR_keep_synonyms = FALSE)
for (i in 1:length(zero$"taxid")) {
gram <- mo_gramstain(zero[i, "genus_species"])
zero[i, "gram_status"] <- gram
}
options(AMR_keep_synonyms = TRUE)
for (i in 1:length(zero$"taxid")) {
gram <- mo_gramstain(zero[i, "genus_species"])
zero[i, "gram_status"] <- gram
}
zero <- read_csv("0_percent.csv")
# clean up genus/species column for running in AMR package
zero %>%
select (-1) %>%
mutate (genus_species = str_replace(genus_species, ",", "")) %>%
mutate (genus_species = str_replace(genus_species, "\\/[[:graph:]][[:graph:]][[:graph:]][[:graph:]][[:graph:]]", "")) %>%
mutate (amr_fullname = NA_character_) %>%
mutate (amr_phylum = NA_character_) %>%
mutate (amr_pathogenicity = NA_character_) %>%
mutate (amr_gram_status = NA_character_) -> zero
zero %>% slice_tail(n=10) -> zero
options(AMR_keep_synonyms = TRUE)
for (i in 1:length(zero$"taxid")) {
zero[i, "amr_fullname"] <- mo_fullname(zero[i, "genus_species"])
zero[i, "amr_phylum"] <- mo_phylum(zero[i, "genus_species"])
zero[i, "amr_pathogenicity"] <- mo_pathogenicity(zero[i, "genus_species"])
zero[i, "amr_gram_status"] <- mo_gramstain(zero[i, "genus_species"])
}
zero <- read_csv("0_percent.csv")
# clean up genus/species column for running in AMR package
zero %>%
select (-1) %>%
mutate (genus_species = str_replace(genus_species, ",", "")) %>%
mutate (genus_species = str_replace(genus_species, "\\/[[:graph:]][[:graph:]][[:graph:]][[:graph:]][[:graph:]]", "")) %>%
mutate (amr_fullname = NA_character_) %>%
mutate (amr_phylum = NA_character_) %>%
mutate (amr_family = NA_character_) %>%
mutate (amr_pathogenicity = NA_character_) %>%
mutate (amr_gram_status = NA_character_) -> zero
zero %>% slice_tail(n=10) -> zero
options(AMR_keep_synonyms = TRUE)
for (i in 1:length(zero$"taxid")) {
zero[i, "amr_fullname"] <- mo_fullname(zero[i, "genus_species"])
zero[i, "amr_phylum"] <- mo_phylum(zero[i, "genus_species"])
zero[i, "amr_family"] <- mo_phylum(zero[i, "genus_species"])
zero[i, "amr_pathogenicity"] <- mo_pathogenicity(zero[i, "genus_species"])
zero[i, "amr_gram_status"] <- mo_gramstain(zero[i, "genus_species"])
}
zero <- read_csv("0_percent.csv")
# clean up genus/species column for running in AMR package
zero %>%
select (-1) %>%
mutate (genus_species = str_replace(genus_species, ",", "")) %>%
mutate (genus_species = str_replace(genus_species, "\\/[[:graph:]][[:graph:]][[:graph:]][[:graph:]][[:graph:]]", "")) %>%
mutate (amr_fullname = NA_character_) %>%
mutate (amr_phylum = NA_character_) %>%
mutate (amr_family = NA_character_) %>%
mutate (amr_pathogenicity = NA_character_) %>%
mutate (amr_gram_status = NA_character_) -> zero
zero %>% slice_tail(n=10) -> zero
options(AMR_keep_synonyms = TRUE)
for (i in 1:length(zero$"taxid")) {
zero[i, "amr_fullname"] <- mo_fullname(zero[i, "genus_species"])
zero[i, "amr_phylum"] <- mo_phylum(zero[i, "genus_species"])
zero[i, "amr_family"] <- mo_family(zero[i, "genus_species"])
zero[i, "amr_pathogenicity"] <- mo_pathogenicity(zero[i, "genus_species"])
zero[i, "amr_gram_status"] <- mo_gramstain(zero[i, "genus_species"])
}
install.packages("beepr")
library(beepr)
n_iter <- 100
pb <- txtProgressBar(style = 3)
for(i in 1:n_iter) {
#---------------------
# Code to be executed
#---------------------
Sys.sleep(0.1) # Remove this line and add your code
#---------------------
setTxtProgressBar(pb, i)
}
beep(0) # Random notification
close(pb) # Close the connection
library(beepr)
n_iter <- 10
pb <- txtProgressBar(style = 3)
for(i in 1:n_iter) {
#---------------------
# Code to be executed
#---------------------
Sys.sleep(0.1) # Remove this line and add your code
#---------------------
setTxtProgressBar(pb, i)
}
beep("mario") # Random notification
close(pb) # Close the connection
library(beepr)
n_iter <- 10
pb <- txtProgressBar(style = 3)
for(i in 1:n_iter) {
#---------------------
# Code to be executed
#---------------------
Sys.sleep(0.1) # Remove this line and add your code
#---------------------
setTxtProgressBar(pb, i)
}
beep("treasure") # Random notification
close(pb) # Close the connection
beep("complete") # Random notification
zero <- read_csv("0_percent.csv")
# clean up genus/species column for running in AMR package
zero %>%
select (-1) %>%
mutate (genus_species = str_replace(genus_species, ",", "")) %>%
mutate (genus_species = str_replace(genus_species, "\\/[[:graph:]][[:graph:]][[:graph:]][[:graph:]][[:graph:]]", "")) %>%
mutate (amr_fullname = NA_character_) %>%
mutate (amr_phylum = NA_character_) %>%
mutate (amr_family = NA_character_) %>%
mutate (amr_pathogenicity = NA_character_) %>%
mutate (amr_gram_status = NA_character_) -> zero
zero %>% slice_tail(n=10) -> zero
options(AMR_keep_synonyms = TRUE)
for (i in 1:length(zero$"taxid")) {
pb <- txtProgressBar(style = 3)
zero[i, "amr_fullname"] <- mo_fullname(zero[i, "genus_species"])
zero[i, "amr_phylum"] <- mo_phylum(zero[i, "genus_species"])
zero[i, "amr_family"] <- mo_family(zero[i, "genus_species"])
zero[i, "amr_pathogenicity"] <- mo_pathogenicity(zero[i, "genus_species"])
zero[i, "amr_gram_status"] <- mo_gramstain(zero[i, "genus_species"])
setTxtProgressBar(pb, i)
}
beep("complete") # Random notification
close(pb) # Close the connection
library(AMR)
options(AMR_keep_synonyms = TRUE)
library(tidyverse)
library(beepr)
setwd("MSc_Project/MSc_Project/")
library(AMR)
options(AMR_keep_synonyms = TRUE)
library(tidyverse)
library(beepr)
# read in file with bacterial names
zero <- read_csv("0_percent.csv")
# clean up genus/species column for running in AMR package
zero %>%
select (-1) %>%
mutate (genus_species = str_replace(genus_species, ",", "")) %>%
mutate (genus_species = str_replace(genus_species, "\\/[[:graph:]][[:graph:]][[:graph:]][[:graph:]][[:graph:]]", "")) %>%
mutate (amr_fullname = NA_character_) %>%
mutate (amr_phylum = NA_character_) %>%
mutate (amr_family = NA_character_) %>%
mutate (amr_pathogenicity = NA_character_) %>%
mutate (amr_gram_status = NA_character_) -> zero
# set progress bar information
pb <- winProgressBar(title = "Windows progress bar", # Window title
label = "Percentage completed", # Window label
min = 0,      # Minimum value of the bar
max = n_iter, # Maximum value of the bar
initial = 0,  # Initial value of the bar
width = 300L) # Width of the window
zero %>% slice_tail(n=10) -> zero
for (i in 1:length(zero$"taxid")) {
zero[i, "amr_fullname"] <- mo_fullname(zero[i, "genus_species"])
zero[i, "amr_phylum"] <- mo_phylum(zero[i, "genus_species"])
zero[i, "amr_family"] <- mo_family(zero[i, "genus_species"])
zero[i, "amr_pathogenicity"] <- mo_pathogenicity(zero[i, "genus_species"])
zero[i, "amr_gram_status"] <- mo_gramstain(zero[i, "genus_species"])
pctg <- paste(round(i/n_iter *100, 0), "% completed")
setWinProgressBar(pb, i, label = pctg) # The label will override the label set on the winProgressBar function
}
beep("facebook") # Random notification
close(pb) # Close the connection
library(AMR)
options(AMR_keep_synonyms = TRUE)
library(tidyverse)
library(beepr)
setwd("MSc_Project/MSc_Project/")
library(AMR)
options(AMR_keep_synonyms = TRUE)
library(tidyverse)
library(beepr)
#setwd("MSc_Project/MSc_Project/")
# read in file with bacterial names
zero <- read_csv("0_percent.csv")
# clean up genus/species column for running in AMR package
zero %>%
select (-1) %>%
mutate (genus_species = str_replace(genus_species, ",", "")) %>%
mutate (genus_species = str_replace(genus_species, "\\/[[:graph:]][[:graph:]][[:graph:]][[:graph:]][[:graph:]]", "")) %>%
mutate (amr_fullname = NA_character_) %>%
mutate (amr_phylum = NA_character_) %>%
mutate (amr_family = NA_character_) %>%
mutate (amr_pathogenicity = NA_character_) %>%
mutate (amr_gram_status = NA_character_) -> zero
# set progress bar information
pb <- winProgressBar(title = "Windows progress bar", # Window title
label = "Percentage completed", # Window label
min = 0,      # Minimum value of the bar
max = n_iter, # Maximum value of the bar
initial = 0,  # Initial value of the bar
width = 300L) # Width of the window
# AMR loop for information about each bacterial species
for (i in 1:length(zero$"taxid")) {
zero[i, "amr_fullname"] <- mo_fullname(zero[i, "genus_species"])
zero[i, "amr_phylum"] <- mo_phylum(zero[i, "genus_species"])
zero[i, "amr_family"] <- mo_family(zero[i, "genus_species"])
zero[i, "amr_pathogenicity"] <- mo_pathogenicity(zero[i, "genus_species"])
zero[i, "amr_gram_status"] <- mo_gramstain(zero[i, "genus_species"])
pctg <- paste(round(i/n_iter *100, 0), "% completed")
setWinProgressBar(pb, i, label = pctg) # The label will override the label set on the winProgressBar function
}
library(AMR)
options(AMR_keep_synonyms = TRUE)
library(tidyverse)
library(beepr)
#setwd("MSc_Project/MSc_Project/")
# read in file with bacterial names
zero <- read_csv("0_percent.csv")
# clean up genus/species column for running in AMR package
zero %>%
select (-1) %>%
mutate (genus_species = str_replace(genus_species, ",", "")) %>%
mutate (genus_species = str_replace(genus_species, "\\[", "")) %>%
mutate (genus_species = str_replace(genus_species, "\\]", "")) %>%
mutate (genus_species = str_replace(genus_species, "\\/[[:graph:]][[:graph:]][[:graph:]][[:graph:]][[:graph:]]", "")) %>%
mutate (amr_fullname = NA_character_) %>%
mutate (amr_phylum = NA_character_) %>%
mutate (amr_family = NA_character_) %>%
mutate (amr_pathogenicity = NA_character_) %>%
mutate (amr_gram_status = NA_character_) -> zero
# set progress bar information
pb <- winProgressBar(title = "Windows progress bar", # Window title
label = "Percentage completed", # Window label
min = 0,      # Minimum value of the bar
max = 100, # Maximum value of the bar
initial = 0,  # Initial value of the bar
width = 300L) # Width of the window
# AMR loop for information about each bacterial species
for (i in 1:length(zero$"taxid")) {
zero[i, "amr_fullname"]      <- mo_fullname     (zero[i, "genus_species"])
zero[i, "amr_phylum"]        <- mo_phylum       (zero[i, "genus_species"])
zero[i, "amr_family"]        <- mo_family       (zero[i, "genus_species"])
zero[i, "amr_pathogenicity"] <- mo_pathogenicity(zero[i, "genus_species"])
zero[i, "amr_gram_status"]   <- mo_gramstain    (zero[i, "genus_species"])
pctg <- paste(round(i/n_iter *100, 0), "% completed")
setWinProgressBar(pb, i, label = pctg) # The label will override the label set on the winProgressBar function
}
length(zero$"taxid")
# set progress bar information
pb <- winProgressBar(title = "AMR Loop Progress", # Window title
label = "Percentage completed", # Window label
min = 0,      # Minimum value of the bar
max = length(zero$"taxid"), # Maximum value of the bar
initial = 0,  # Initial value of the bar
width = 300L) # Width of the window
library(AMR)
options(AMR_keep_synonyms = TRUE)
library(tidyverse)
library(beepr)
#setwd("MSc_Project/MSc_Project/")
# read in file with bacterial names
zero <- read_csv("0_percent.csv")
# clean up genus/species column for running in AMR package
zero %>%
select (-1) %>%
mutate (genus_species = str_replace(genus_species, ",", "")) %>%
mutate (genus_species = str_replace(genus_species, "\\[", "")) %>%
mutate (genus_species = str_replace(genus_species, "\\]", "")) %>%
mutate (genus_species = str_replace(genus_species, "\\/[[:graph:]][[:graph:]][[:graph:]][[:graph:]][[:graph:]]", "")) %>%
mutate (amr_fullname = NA_character_) %>%
mutate (amr_phylum = NA_character_) %>%
mutate (amr_family = NA_character_) %>%
mutate (amr_pathogenicity = NA_character_) %>%
mutate (amr_gram_status = NA_character_) -> zero
# set progress bar information
pb <- winProgressBar(title = "AMR Loop Progress", # Window title
label = "Percentage completed", # Window label
min = 0,      # Minimum value of the bar
max = length(zero$"taxid"), # Maximum value of the bar
initial = 0,  # Initial value of the bar
width = 300L) # Width of the window
# AMR loop for information about each bacterial species
for (i in 1:length(zero$"taxid")) {
zero[i, "amr_fullname"]      <- mo_fullname     (zero[i, "genus_species"])
zero[i, "amr_phylum"]        <- mo_phylum       (zero[i, "genus_species"])
zero[i, "amr_family"]        <- mo_family       (zero[i, "genus_species"])
zero[i, "amr_pathogenicity"] <- mo_pathogenicity(zero[i, "genus_species"])
zero[i, "amr_gram_status"]   <- mo_gramstain    (zero[i, "genus_species"])
pctg <- paste(round(i/length(zero$"taxid") *100, 0), "% completed")
setWinProgressBar(pb, i, label = pctg) # The label will override the label set on the winProgressBar function
}
beep("mario") # Random notification
close(pb) # Close the connection
View(zero)
write_csv(zero, "0_percent_info.csv")
